name: ci

permissions:
  contents: read

on:
  pull_request:
    branches:
      - '**'

jobs:
  crates-build:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-environment
        with:
          setup-rust: 'true'
          setup-protoc: 'true'
      - name: Build
        working-directory: ./crates/rgkl
        run: cargo build --release

  crates-lint:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-environment
        with:
          setup-rust: 'true'
          setup-protoc: 'true'
      - name: Run format check
        working-directory: ./crates/rgkl
        run: cargo fmt --all -- --check

  crates-vet:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-environment
        with:
          setup-rust: 'true'
          setup-protoc: 'true'
      - name: Run clippy
        working-directory: ./crates/rgkl
        run: cargo clippy --all -- -D warnings

  crates-test:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-environment
        with:
          setup-rust: 'true'
          setup-protoc: 'true'
      - name: Run tests
        working-directory: ./crates/rgkl
        run: cargo test

  modules-discover:
    runs-on: ubuntu-24.04
    outputs:
      packages: ${{ steps.packages.outputs.list }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-environment
        with:
          setup-go: 'true'
      - id: packages
        working-directory: ./modules
        run: |
          packages=$(go list ./... | jq -R -s -c 'split("\n")[:-1]')
          echo "list=$packages" >> $GITHUB_OUTPUT

  modules-vet:
    needs: modules-discover
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        package: ${{ fromJson(needs.modules-discover.outputs.packages) }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-environment
        with:
          setup-go: 'true'
      - name: Vet ${{ matrix.package }}
        run: go vet ${{ matrix.package }}

  modules-test:
    needs: modules-discover
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        package: ${{ fromJson(needs.modules-discover.outputs.packages) }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-environment
        with:
          setup-go: 'true'
      - name: Test ${{ matrix.package }}
        run: go test -race -timeout 5m ${{ matrix.package }}

  dashboard-ui-lint:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-environment
        with:
          setup-node: 'true'
      - name: Install dependencies
        working-directory: ./dashboard-ui
        run: pnpm install --frozen-lockfile
      - name: Lint
        working-directory: ./dashboard-ui
        run: pnpm lint

  dashboard-ui-test:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-environment
        with:
          setup-node: 'true'
      - name: Install dependencies
        working-directory: ./dashboard-ui
        run: pnpm install --frozen-lockfile
      - name: Test
        working-directory: ./dashboard-ui
        run: pnpm test run

  dashboard-ui-build:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-environment
        with:
          setup-node: 'true'
      - name: Install dependencies
        working-directory: ./dashboard-ui
        run: pnpm install --frozen-lockfile
      - name: Build
        working-directory: ./dashboard-ui
        run: pnpm build

  docker-builds:
    needs: [
      crates-build, crates-lint, crates-vet, crates-test,
      modules-lint, modules-vet, modules-test,
      dashboard-ui-lint, dashboard-ui-test, dashboard-ui-build
    ]
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        image: [ dashboard, cluster-api, cluster-agent ]
        target: [ final, debug ]
        runner: [ ubuntu-24.04, ubuntu-24.04-arm ]
        include:
          - runner: ubuntu-24.04
            platform: linux/amd64
            arch: amd64
          - runner: ubuntu-24.04-arm
            platform: linux/arm64
            arch: arm64
          - image: dashboard
            dockerfile: build/package/Dockerfile.dashboard
            context: .
            build-args: |
              NODE_VERSION=22.16.0
              PNPM_VERSION=10.11.0
              GO_VERSION=1.24.3
          - image: cluster-api
            dockerfile: build/package/Dockerfile.cluster-api
            context: .
            build-args: |
              GO_VERSION=1.24.3
          - image: cluster-agent
            dockerfile: build/package/Dockerfile.cluster-agent
            context: .
            build-args: |
              GO_VERSION=1.24.3
              RUST_VERSION=1.87.0
        exclude:
          - image: cluster-api
            target: debug
          - image: cluster-agent
            target: debug

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: kubetail-${{ matrix.image }}
          tags: |
            type=ref,event=pr,suffix=-${{ matrix.target }}
            type=raw,value=${{ matrix.target }}-{{sha}}
          flavor: |
            suffix=-${{ matrix.arch }}

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-${{ runner.arch }}-buildx-${{ matrix.image }}-${{ matrix.target }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-buildx-${{ matrix.image }}-${{ matrix.target }}-
            ${{ runner.os }}-${{ runner.arch }}-buildx-${{ matrix.image }}-

      - name: Build ${{ matrix.image }} (${{ matrix.target }}) natively for ${{ matrix.arch }}
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          platforms: ${{ matrix.platform }}
          target: ${{ matrix.target }}
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: ${{ matrix.build-args }}
          cache-from: |
            type=gha,scope=${{ matrix.image }}-${{ matrix.target }}-${{ matrix.arch }}
            type=local,src=/tmp/.buildx-cache
          cache-to: |
            type=gha,mode=max,scope=${{ matrix.image }}-${{ matrix.target }}-${{ matrix.arch }}
            type=local,dest=/tmp/.buildx-cache-new,mode=max
          outputs: type=docker,dest=/tmp/${{ matrix.image }}-${{ matrix.target }}-${{ matrix.arch }}.tar

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-${{ matrix.image }}-${{ matrix.target }}-${{ matrix.arch }}
          path: /tmp/${{ matrix.image }}-${{ matrix.target }}-${{ matrix.arch }}.tar
          retention-days: 1
          compression-level: 6

  cli-builds:
    needs: [
      crates-build, crates-lint, crates-vet, crates-test,
      modules-lint, modules-vet, modules-test,
      dashboard-ui-lint, dashboard-ui-test, dashboard-ui-build
    ]
    strategy:
      matrix:
        include:
          - os: ubuntu-24.04
            platform: linux-amd64
          - os: ubuntu-24.04-arm
            platform: linux-arm64
          - os: macos-15
            platform: macos-arm64
          - os: macos-14
            platform: macos-arm64
          - os: macos-13
            platform: macos-amd64
          - os: windows-latest
            platform: windows-amd64
          - os: windows-11-arm
            platform: windows-arm64
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-environment
        with:
          setup-node: 'true'
          setup-go: 'true'
      - name: Build CLI for ${{ matrix.platform }}
        run: make build
        env:
          PLATFORM: ${{ matrix.platform }}